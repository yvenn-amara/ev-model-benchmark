import pandas as pd
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1.inset_locator import inset_axes, mark_inset
import datetime
sns.set_context("paper")
matplotlib.rc('pdf', fonttype=42)

load = pd.read_csv("3. Python/1. Outputs/palo_alto/observed_all_Charge.Duration.csv")
occupancy = pd.read_csv("3. Python/1. Outputs/palo_alto/observed_all_Park.Duration.csv")
sessions = pd.read_csv("2. R/1. Outputs/palo_alto/daily_sessions.csv")
train_dates = pd.read_csv("2. R/1. Outputs/palo_alto/train_dates.csv")
test_dates = pd.read_csv("2. R/1. Outputs/palo_alto/test_dates.csv")

train_dates['Start'] = pd.to_datetime(train_dates['Start'])
train_dates['End'] = pd.to_datetime(train_dates['End'])
test_dates['Start'] = pd.to_datetime(test_dates['Start'])
test_dates['End'] = pd.to_datetime(test_dates['End'])
load['Start'] = pd.to_datetime(load['Start'])
occupancy['Start'] = pd.to_datetime(occupancy['Start'])
sessions['Start_date'] = pd.to_datetime(sessions['Start_date'])

load = load[(load['Start'] >= test_dates['Start'][0]) & (load['Start'] <= test_dates['End'][3])].reset_index(drop=True)
occupancy = occupancy[(occupancy['Start'] >= test_dates['Start'][0]) & (occupancy['Start'] <= test_dates['End'][3])].reset_index(drop=True)
sessions = sessions[(sessions['Start_date'] >= train_dates['Start'][0]) & (sessions['Start_date'] <= test_dates['End'][3])].reset_index(drop=True)

print("Load Curve")
plt.figure()
ax = sns.lineplot(data=load, x="Start", y="Power")
ax.set(xlabel="Time [minutes]", ylabel = "Load [kW]")
plt.xticks(rotation=45)
plt.tight_layout()
axins = inset_axes(ax,2,1.4,loc='lower right')#bbox_to_anchor=(200,315))
axins.set_xticks([])
axins.set_ylabel(" ")
sns.lineplot(data=load[(load['Start'] >= test_dates['Start'][3]+datetime.timedelta(7)) & (load['Start'] <= test_dates['End'][3])].reset_index(drop=True), x="Start", y="Power", ax=axins)
mark_inset(ax, axins, loc1=2, loc2=1, fc="none", ec="0.7")
plt.savefig('3. Python/1. Outputs/palo_alto/load_palo_alto.pdf', dpi=300)

print("Occupancy Curve")
plt.figure()
ax = sns.lineplot(data=occupancy, x="Start", y="Occupancy", color='orange')
ax.set(xlabel="Time [minutes]", ylabel = "Occupancy [Number of EVs]")
plt.xticks(rotation=45)
plt.tight_layout()
axins = inset_axes(ax,2,1.4,loc='lower right')#bbox_to_anchor=(500,500))
axins.set_xticks([])
axins.set_ylabel(" ")
sns.lineplot(data=occupancy[(occupancy['Start'] >= test_dates['Start'][3]+datetime.timedelta(7)) & (occupancy['Start'] <= test_dates['End'][3])].reset_index(drop=True), x="Start", y="Occupancy", color='orange', ax=axins)
mark_inset(ax, axins, loc1=2, loc2=1, fc="none", ec="0.7")
plt.savefig('3. Python/1. Outputs/palo_alto/occupancy_palo_alto.pdf', dpi=300)

print("Sessions")
plt.figure()
ax = sns.lineplot(data=sessions[(sessions['Start_date'] >= train_dates['Start'][0]) & (sessions['Start_date'] <= train_dates['End'][3])].reset_index(drop=True), x="Start_date", y="sessions", color='black')
sns.lineplot(data=sessions[(sessions['Start_date'] >= test_dates['Start'][0]) & (sessions['Start_date'] <= test_dates['End'][3])].reset_index(drop=True), x="Start_date", y="sessions", color='green')
plt.xticks(rotation=45)
ax.set(xlabel="Date [day]", ylabel = "Number of sessions")
plt.tight_layout()
axins = inset_axes(ax,3.5,1.4,loc='lower right')#bbox_to_anchor=(200,315))
axins.set_xticks([])
axins.set_ylabel(" ")
sns.lineplot(data=sessions[(sessions['Start_date'] >= test_dates['Start'][0]) & (sessions['Start_date'] <= test_dates['End'][3])].reset_index(drop=True), x="Start_date", y="sessions", color='green', ax=axins)
plt.axvline(test_dates['End'][0], color='grey', linestyle='--')
plt.text(test_dates['End'][0]-datetime.timedelta(11),170,'Test 1')
plt.axvline(test_dates['End'][1], color='grey', linestyle='--')
plt.text(test_dates['End'][1]-datetime.timedelta(10.5),170,'Test 2')
plt.axvline(test_dates['End'][2], color='grey', linestyle='--')
plt.text(test_dates['End'][2]-datetime.timedelta(10.5),170,'Test 3')
plt.text(test_dates['End'][2]+datetime.timedelta(4),170,'Test 4')
mark_inset(ax, axins, loc1=2, loc2=1, fc="none", ec="0.7")
plt.savefig('3. Python/1. Outputs/palo_alto/sessions_palo_alto.pdf', dpi=300)