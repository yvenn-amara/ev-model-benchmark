i
fit<-cvfit$fit
betauHat<-fit$beta[,cvfit$min]
?cv.ncvreg
ng <- 1001
xg <- seq(0,1,length=ng)
Xg <- cbind(rep(1,ng)) # les constantes
# la matrice de base en ondelettes
# evalu\'ee sur la grille xg
Zg <- ZDaub(xg,range.x=range.x,numLevels=numLevels)
Cg <- cbind(Xg,Zg) # la matrice du plan d'experience
###### Estimation #####
fHatgncvreg <- Cg%*%betauHat
plot(y,pch='.')
lines(f)
lines(fHatgncvreg,col='red')
plot(x,y,pch='.')
plot(x,y,pch='.',cex=2)
plot(x,y,pch='.',cex=4
plot(x,y,pch='.',cex=4)
lines(f)
lines(x,f)
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1]
# mais non equi-distants!
# donnees = signal + bruit Gaaussien N(0,1)
f<-fTrue(x)
y <- f + rnorm(n)
numLevels <- 6
range.x <- c(0,1)
Z <- ZDaub(x,range.x=range.x,numLevels=numLevels)
plot(x,y,pch='.',cex=4)
lines(x,f)
lines(x,fHatgncvreg,col='red')
rm(list=objects())
#install.packages("wavethresh")
library(splines)
library(wavethresh)
library(gamwave)
library(ncvreg)
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1]
# mais non equi-distants!
# donnees = signal + bruit Gaaussien N(0,1)
f<-fTrue(x)
y <- f + rnorm(n)
numLevels <- 6
range.x <- c(0,1)
Z <- ZDaub(x,range.x=range.x,numLevels=numLevels)
dim(Z)
matplot(Z,type='l')
cvfit<-cv.ncvreg(Z,y,penalty="MCP")
fit<-cvfit$fit
# la valeur optimale du parametre (constante comprise)
betauHat<-fit$beta[,cvfit$min]
ng <- 1001
xg <- seq(0,1,length=ng)
Xg <- cbind(rep(1,ng)) # les constantes
# la matrice de base en ondelettes
# evalu\'ee sur la grille xg
Zg <- ZDaub(xg,range.x=range.x,numLevels=numLevels)
Cg <- cbind(Xg,Zg) # la matrice du plan d'experience
###### Estimation #####
fHatgncvreg <- Cg%*%betauHat
plot(x,y,pch='.',cex=4)
lines(x,f)
lines(x,fHatgncvreg,col='red')
length(fHatgncvreg)
lines(xg,fHatgncvreg,col='red')
install.packages("scoop")
install.packages("scoop")
require(scoop)
install.packages("scoop")
setwd("C:\\Amont\\GAM_ondelettes\\")
install(scoop)
install.packages("C:/Amont/GAM_ondelettes/scoop_0.2-1.tar.gz", repos = NULL, type = "source")
library(scoop)
colasso<-lasso(Z, y)
scoo<-selection(colasso)
betauHat<-scoo$beta.BIC
# Pour le trac\'e sur une grille fine
ng <- 1001
xg <- seq(0,1,length=ng)
Xg <- cbind(rep(1,ng))
Zg <- ZDaub(xg,range.x=range.x,numLevels=numLevels)
Cg <- cbind(Xg,Zg)
fHatgscoop <- Cg%*%betauHat
lines(xg,fHatgscoop,col='blue')
X <- cbind(rep(1,n),x)
# il y a 200 points donc 25 noeuds devraient suffire
numIntKnots <- 25
intKnots <- quantile(unique(x),
seq(0,1,length=numIntKnots+2))[-c(1,numIntKnots+2)]
range.x <- c(0,1)
# La matrice des plines de regression
Zs <- ZOSull(x,range.x=range.x,intKnots=intKnots)
Cmat <- cbind(X,Zs)
CTC <- crossprod(Cmat) ; CTy <- crossprod(Cmat,y)
Dmat <- diag(c(0,0,rep(1,ncol(Zs))))
lambda <- 0.0002 # parametre de lissage
betauHat <- solve(CTC+lambda*Dmat,CTy)
# Calculs pour le trac\'e
ng <- 1001
xg <- seq(0,1,length=ng)
Xg <- cbind(rep(1,ng),xg)
Zgs <- ZOSull(xg,range.x=range.x,intKnots=intKnots)
Cg <- cbind(Xg,Zgs)
fHatgspline <- Cg%*%betauHat
plot(x,y,pch='.',cex=4)
lines(x,f)
lines(xg,fHatgncvreg,col='red')
lines(xg,fHatgscoop,col='blue')
lines(fHatgspline,col='green')
lines(xg,fHatgspline,col='green')
?GAMwv
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
function (dir)
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
build()
install()
rm(list=objects())
#install.packages("wavethresh")
library(splines)
library(wavethresh)
library(gamwave)
library(ncvreg)
library(scoop)
fHatMCP<-fitWav(x,y,xnew=NULL,range.x=range(x),numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",Intercept=TRUE,penalty="MCP")
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1] mais non equi-distants!
f<-fTrue(x)
y <- f + rnorm(n)
fHatMCP<-fitWav(x,y,xnew=NULL,range.x=range(x),numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",Intercept=TRUE,penalty="MCP")
rm(list=objects())
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
build()
install()
library(gamwave)
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1] mais non equi-distants!
f<-fTrue(x)
y <- f + rnorm(n)
fHatMCP<-fitWav(x,y,xnew=NULL,range.x=range(x),numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",Intercept=TRUE,penalty="MCP")
##################################
rm(list=objects())
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
build()
install()
library(gamwave)
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1] mais non equi-distants!
f<-fTrue(x)
y <- f + rnorm(n)
fHatMCP<-fitWav(x,y,xnew=NULL,range.x=range(x),numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",Intercept=TRUE,penalty="MCP")
fHatscoop<-fitWav(x,y,xnew=NULL,range.x=range(x),numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",Intercept=TRUE,penalty="scoop")
plot(x,y,pch='.',cex=4)
lines(x,f)
lines(xg,fHatMCP,col='red')
lines(xg,fHatscoop,col='blue')
lines(x,fHatMCP,col='red')
lines(x,fHatscoop,col='blue')
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1] mais non equi-distants!
ng <- 1001
xnew <- seq(0,1,length=ng)
f<-fTrue(x)
y <- f + rnorm(n)
fHatMCP<-fitWav(x,y,xnew=xnew,range.x=range(x),numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",Intercept=TRUE,penalty="MCP")
fHatscoop<-fitWav(x,y,xnew=xnew,range.x=range(x),numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",Intercept=TRUE,penalty="scoop")
plot(x,y,pch='.',cex=4)
lines(xnew,f)
lines(xnew,fHatMCP,col='red')
lines(xnew,fHatscoop,col='blue')
range(x)
range(xnew)
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1] mais non equi-distants!
ng <- 1001
xnew <- seq(0,1,length=ng)
numLevels <- 6
range.x <- c(0,1)
f<-fTrue(x)
y <- f + rnorm(n)
fHatMCP<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=numLevels,filterNumber=5,
resolution=16384,family="DaubExPhase",Intercept=TRUE,penalty="MCP")
fHatscoop<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",Intercept=TRUE,penalty="scoop")
plot(x,y,pch='.',cex=4)
lines(xnew,f)
lines(x,f)
lines(xnew,fHatMCP,col='red')
lines(xnew,fHatscoop,col='blue')
?fitWav
?fitWav
rm(list=objects())
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
library(devtools)
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
build()
library(gamwave)
?ZDaub
?fitWav
rm(list=objects())
#install.packages("wavethresh")
library(splines)
library(wavethresh)
library(gamwave)
library(ncvreg)
library(scoop)
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1]
# mais non equi-distants!
# donnees = signal + bruit Gaaussien N(0,1)
f<-fTrue(x)
y <- f + rnorm(n)
numLevels <- 6
range.x <- c(0,1)
Z <- ZDaub(x,range.x=range.x,numLevels=numLevels)
cvfit<-cv.ncvreg(Z,y,penalty="MCP")
fit<-cvfit$fit
# la valeur optimale du parametre (constante comprise)
betauHat<-fit$beta[,cvfit$min]
length(betauHat)
ng <- 1001
xg <- seq(0,1,length=ng)
Xg <- cbind(rep(1,ng)) # les constantes
# la matrice de base en ondelettes
# evalu\'ee sur la grille xg
Zg <- ZDaub(xg,range.x=range.x,numLevels=numLevels)
Cg <- cbind(Xg,Zg) # la matrice du plan d'experience
dim(Cg)
dim(Z)
fit$beta[,cvfit$min]
?cv.ncvreg
cv.ncvreg()
cv.ncvreg
rm(list=objects())
library(devtools)
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
build()
install()
##################################
rm(list=objects())
library(devtools)
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
build()
install()
##################################
rm(list=objects())
library(devtools)
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
build()
install()
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1] mais non equi-distants!
ng <- 1001
xnew <- seq(0,1,length=ng)
numLevels <- 6
range.x <- c(0,1)
f<-fTrue(x)
y <- f + rnorm(n)
fHatMCP<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=numLevels,filterNumber=5,
resolution=16384,family="DaubExPhase",Intercept=TRUE,penalty="MCP")
fHatscoop<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",Intercept=TRUE,penalty="scoop")
plot(x,y,pch='.',cex=4)
lines(x,f)
lines(xnew,fHatMCP,col='red')
lines(xnew,fHatscoop,col='blue')
rm(list=objects())
#install.packages("wavethresh")
library(splines)
library(wavethresh)
library(gamwave)
library(ncvreg)
library(scoop)
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1] mais non equi-distants!
ng <- 1001
xnew <- seq(0,1,length=ng)
numLevels <- 6
range.x <- c(0,1)
f<-fTrue(x)
y <- f + rnorm(n)
fHatMCP<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=numLevels,filterNumber=5,
resolution=16384,family="DaubExPhase",penalty="MCP")
fHatscoop<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",penalty="scoop")
plot(x,y,pch='.',cex=4)
lines(x,f)
lines(xnew,fHatMCP,col='red')
lines(xnew,fHatscoop,col='blue')
##################################
rm(list=objects())
library(devtools)
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
build()
install()
rm(list=objects())
#install.packages("wavethresh")
library(splines)
library(wavethresh)
library(gamwave)
library(ncvreg)
library(scoop)
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1] mais non equi-distants!
ng <- 1001
xnew <- seq(0,1,length=ng)
numLevels <- 6
range.x <- c(0,1)
f<-fTrue(x)
y <- f + rnorm(n)
fHatMCP<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=numLevels,filterNumber=5,
resolution=16384,family="DaubExPhase",penalty="MCP")
fHatscoop<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",penalty="scoop")
plot(x,y,pch='.',cex=4)
lines(x,f)
lines(xnew,fHatMCP,col='red')
lines(xnew,fHatscoop,col='blue')
numIntKnots <- 25
intKnots <- quantile(unique(x),
seq(0,1,length=numIntKnots+2))[-c(1,numIntKnots+2)]
fHatsplines<-fitSplines(x,y,xnew=xnew,range.x,intKnots,drv=0,lambda=0.0002)
intKnots
fitSplines<-function(x,y,xnew=NULL,range.x,intKnots,drv=0,lambda=0.0002)
{
Z<- ZOSull(x,range.x=range.x,intKnots=intKnots)
X <- cbind(rep(1,length(xnew)))
Cmat <- cbind(X,Z)
CTC <- crossprod(Cmat)
CTy <- crossprod(Cmat,y)
Dmat <- diag(c(0,0,rep(1,ncol(Z))))
betaHat <- solve(CTC+lambda*Dmat,CTy)
if(!is.null(xnew))
{
Z<- ZOSull(xnew,range.x=range.x,intKnots=intKnots)
Cmat <- cbind(X,Z)
}
fHat<- Cmat%*%betaHat
return(fHat)
}
numIntKnots <- 25
intKnots <- quantile(unique(x),seq(0,1,length=numIntKnots+2))[-c(1,numIntKnots+2)]
fHatsplines<-fitSplines(x,y,xnew=xnew,range.x,intKnots,drv=0,lambda=0.0002)
Z<- ZOSull(x,range.x=range.x,intKnots=intKnots)
X <- cbind(rep(1,length(xnew)))
Cmat <- cbind(X,Z)
##################################
rm(list=objects())
library(devtools)
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
build()
install()
rm(list=objects())
#install.packages("wavethresh")
library(splines)
library(wavethresh)
library(gamwave)
library(ncvreg)
library(scoop)
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1] mais non equi-distants!
ng <- 1001
xnew <- seq(0,1,length=ng)
numLevels <- 6
range.x <- c(0,1)
f<-fTrue(x)
y <- f + rnorm(n)
fHatMCP<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=numLevels,filterNumber=5,
resolution=16384,family="DaubExPhase",penalty="MCP")
fHatscoop<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",penalty="scoop")
numIntKnots <- 25
intKnots <- quantile(unique(x),seq(0,1,length=numIntKnots+2))[-c(1,numIntKnots+2)]
fHatsplines<-fitSplines(x,y,xnew=xnew,range.x,intKnots,drv=0,lambda=0.0002)
Z<- ZOSull(x,range.x=range.x,intKnots=intKnots)
X <- cbind(rep(1,length(x)))
Cmat <- cbind(X,Z)
CTC <- crossprod(Cmat)
CTy <- crossprod(Cmat,y)
Dmat <- diag(c(0,0,rep(1,ncol(Z))))
betaHat <- solve(CTC+lambda*Dmat,CTy)
lambda=0.0002
betaHat <- solve(CTC+lambda*Dmat,CTy)
dim(lambda*Dmat)
dim(CTC)
dim(Cmat)
ncol(Z)
Dmat <- diag(c(0,0,rep(1,ncol(Z))))
dim(Dmat)
Zs <- ZOSull(x,range.x=range.x,intKnots=intKnots)
Cmat <- cbind(X,Zs)
CTC <- crossprod(Cmat) ; CTy <- crossprod(Cmat,y)
Dmat <- diag(c(0,0,rep(1,ncol(Zs))))
lambda <- 0.0002 # parametre de lissage
betauHat <- solve(CTC+lambda*Dmat,CTy)
X <- cbind(rep(1,n),x)
# il y a 200 points donc 25 noeuds devraient suffire
numIntKnots <- 25
intKnots <- quantile(unique(x),
seq(0,1,length=numIntKnots+2))[-c(1,numIntKnots+2)]
range.x <- c(0,1)
# La matrice des plines de regression
Zs <- ZOSull(x,range.x=range.x,intKnots=intKnots)
Cmat <- cbind(X,Zs)
CTC <- crossprod(Cmat) ; CTy <- crossprod(Cmat,y)
Dmat <- diag(c(0,0,rep(1,ncol(Zs))))
lambda <- 0.0002 # parametre de lissage
betauHat <- solve(CTC+lambda*Dmat,CTy)
dim(X)
##################################
rm(list=objects())
library(devtools)
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
build()
install()
rm(list=objects())
#install.packages("wavethresh")
library(splines)
library(wavethresh)
library(gamwave)
library(ncvreg)
library(scoop)
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1] mais non equi-distants!
ng <- 1001
xnew <- seq(0,1,length=ng)
numLevels <- 6
range.x <- c(0,1)
f<-fTrue(x)
y <- f + rnorm(n)
fHatMCP<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=numLevels,filterNumber=5,
resolution=16384,family="DaubExPhase",penalty="MCP")
fHatscoop<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",penalty="scoop")
numIntKnots <- 25
intKnots <- quantile(unique(x),seq(0,1,length=numIntKnots+2))[-c(1,numIntKnots+2)]
fHatsplines<-fitSplines(x,y,xnew=xnew,range.x,intKnots,drv=0,lambda=0.0002)
Z<- ZOSull(x,range.x=range.x,intKnots=intKnots)
X <- cbind(rep(1,length(x)),x)
Cmat <- cbind(X,Z)
CTC <- crossprod(Cmat)
CTy <- crossprod(Cmat,y)
Dmat <- diag(c(0,0,rep(1,ncol(Z))))
betaHat <- solve(CTC+lambda*Dmat,CTy)
lambda=0.0002
betaHat <- solve(CTC+lambda*Dmat,CTy)
##################################
rm(list=objects())
library(devtools)
setwd("C:\\Amont\\GAM_ondelettes\\gamwave\\")
document()
build()
install()
rm(list=objects())
#install.packages("wavethresh")
library(splines)
library(wavethresh)
library(gamwave)
library(ncvreg)
library(scoop)
n <- 200 # nombre d'observations
set.seed(1) # graine du simulateur
x <- sort(runif(n)) ##  points uniformement repartis dans [0,1] mais non equi-distants!
ng <- 1001
xnew <- seq(0,1,length=ng)
numLevels <- 6
range.x <- c(0,1)
f<-fTrue(x)
y <- f + rnorm(n)
fHatMCP<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=numLevels,filterNumber=5,
resolution=16384,family="DaubExPhase",penalty="MCP")
fHatscoop<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=6,filterNumber=5,
resolution=16384,family="DaubExPhase",penalty="scoop")
numIntKnots <- 25
intKnots <- quantile(unique(x),seq(0,1,length=numIntKnots+2))[-c(1,numIntKnots+2)]
fHatsplines<-fitSplines(x,y,xnew=xnew,range.x,intKnots,drv=0,lambda=0.0002)
lines(xnew,fHatsplines,col='green')
