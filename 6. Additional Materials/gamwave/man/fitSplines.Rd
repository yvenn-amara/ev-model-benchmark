% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitSplines.R, R/fitSplinesR.R
\name{fitSplines}
\alias{fitSplines}
\title{fitSplines}
\usage{
fitSplines(x, y, xnew = NULL, range.x, intKnots, drv = 0, lambda = NULL,
  seqLambda = NULL)

fitSplines(x, y, xnew = NULL, range.x, intKnots, drv = 0, lambda = NULL,
  seqLambda = NULL)
}
\arguments{
\item{x}{the x observed values}

\item{y}{the y observed values}

\item{xnew}{a new xgrid  over which we evaluate the fitted function (for display purposes)}

\item{range.x}{the min and max values of x over which the basis functions are evaluated
(x is allowed to take values outside the interior knots).}

\item{intKnots}{the interior knots for the B-splines basis functions (all splines are of order 4 (cubic))}

\item{drv}{an integer with values between 0 and 3. The derivative of the given order \code{drv} is evaluated at the x positions. Defaults to zero.}

\item{lambda}{is the spline smoothing parameter (set to NULL if it is find by GCV within the vector seqLambda)}

\item{seqLambda}{is a vector of smoothing parameters which must be provided if lambda is not provided.}

\item{x}{the x observed values}

\item{y}{the y observed values}

\item{xnew}{the x value over which calculate \eqn{\widehat{f}(x)}}

\item{range.x}{the min and max value over which calculated the basis}

\item{intKnots}{}

\item{drv}{...}

\item{lambda}{the penalisation parameter of the ridge regression}
}
\value{
a list containing

\item{fHat}{an array containing \eqn{\widehat{f}(x)}}
\item{betaHat}{an array containing the estimated regression coefficients}
\item{lambda}{the (CV optimised or not) penalised parameter}
\item{errCV}{the CV error corresponding to the seqLambda}

a list containing

\item{fHat}{an array containing \eqn{\widehat{f}(x)}}
\item{betaHat}{an array containing the estimated regression coefficients}
\item{lambda}{the (CV optimised or not) penalised parameter}
\item{errCV}{the CV error corresponding to the seqLambda}
}
\description{
Direct scatterplot semi-parametric regression smoothing with O'Sullivan penalized splines

fit a function by penalised wavelet regression
}
\examples{
# Obtain scatterplot data corresponding to environmental
# data from the R package `lattice'. Set up plotting 
# grid, knots and smoothing parameter:
require(lattice) ; attach(environmental) 
set.seed(1) 
x <- radiation ; y <- ozone^(1/3)
range.x=range(x)
ng <- 101
a <- 0 ; b <- 350 ; xnew <- seq(a,b,length=101) 
numIntKnots <- 20
intKnots <- quantile(unique(x),seq(0,1,length=numIntKnots+2))[-c(1,numIntKnots+2)]
names(intKnots) <- NULL
seqLambda<-seq(100,100000,length=100)
fHatsplines<-fitSplines(x,y,xnew=xnew,range.x,intKnots,drv=0,seqLambda=seqLambda)
# Display the fit:
par(mfrow=c(1,2))
plot(x,y,xlim=range(xnew),bty="l",type="n",xlab="radiation",
  ylab="cuberoot of ozone",main="(a) direct fit; gcv 
    choice of smooth. par.")
lines(xnew,fHatsplines$fHat,col='green',lwd=2)
points(x,y,lwd=1)
plot(fHatsplines$errCV,type='b',pch=20)
detach(environmental)

n <- 200 
set.seed(1) 
x <- sort(runif(n)) 
ng <- 1001
xnew <- seq(0,1,length=ng)
numLevels <- 6
range.x <- c(0,1)
f<-fTrue(x)
y <- f + rnorm(n) 
fHatMCP<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=numLevels,filterNumber=5,
               resolution=16384,family="DaubExPhase",penalty="MCP")
fHatscoop<-fitWav(x,y,xnew=xnew,range.x=range.x,numLevels=6,filterNumber=5,
                 resolution=16384,family="DaubExPhase",penalty="scoop")
numIntKnots <- 25 
intKnots <- quantile(unique(x),seq(0,1,length=numIntKnots+2))[-c(1,numIntKnots+2)]
seqLambda<-seq(10^-7,10^-6,length=100)
fHatsplines<-fitSplines(x,y,xnew=xnew,range.x,intKnots,drv=0,seqLambda=seqLambda)

plot(x,y,pch='.',cex=4)
lines(x,f)
lines(xnew,fHatMCP,col='red')
lines(xnew,fHatscoop,col='blue')
lines(xnew,fHatsplines$fHat,col='green')

plot(fHatsplines$errCV,type='b',pch=20)

}
\author{
Anestis Antoniadis <anestisa@gmail.com>

Yannig  Goude <yannig.goude@edf.fr>

Anestis Antoniadis <anestisa@gmail.com>

Yannig  Goude <yannig.goude@edf.fr>
}

